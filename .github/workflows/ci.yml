#
# @file       ci.yml
# @copyright  2022 Andrew MacIsaac
# @remark
#   SPDX-License-Identifier: MPL-2.0
#
# @brief      Build the library for all platforms.
#             Run the unit tests on the three desktop platforms.
#
name: Continuous Integration

# Trigger normal CMake test builds for all branches on push and PR.
on:
  push:
  pull_request:

env:
  # Set CMake build type.
  BUILD_TYPE: Debug
  # Build documentation as well.
  BUILD_DOCS: 1

# Run the builds for each platform.
jobs:
  unit-test:
    name:     Unit Test
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - macos-latest
        - ubuntu-latest
        - windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Install dependencies.
      - name: Install APT dependencies
        if: matrix.os == 'ubuntu-latest'
        run:  sudo apt-get install -y doxygen ninja-build

      - name: Install Homebrew dependencies
        if: matrix.os == 'macos-latest'
        run:  brew install doxygen ninja

      - name: Install Python dependencies
        run:  pip3 install --user \
                breathe           \
                sphinx            \
                sphinx_rtd_theme

      # Check out the code.
      - name: Clone ${{ github.repository }}
        uses: actions/checkout@v2
        with:
          path: repo

      # Create build directory.
      - name: Create build environment
        run:  cmake -E make_directory '${{ github.workspace }}/repo/build'

      # Run CMake configuration.
      - name:               Configure CMake
        if: matrix.os != 'windows-latest'
        working-directory:  ${{ github.workspace }}/repo/build
        run:                cmake ..                              \
                              -G Ninja                            \
                              -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"  \
                              -DBUILD_DOCUMENTATION=${BUILD_DOCS}
      - name:               Configure CMake
        if: matrix.os == 'windows-latest'
        working-directory:  ${{ github.workspace }}/repo/build
        run:                cmake ..                              \
                              -G 'Visual Studio 16 2019'          \
                              -A x64                              \
                              -DBUILD_DOCUMENTATION=${BUILD_DOCS}

      # Build the library.
      - name:               Build library
        working-directory:  ${{ github.workspace }}/repo/build
        run:                cmake --build . --config "${BUILD_TYPE}"

      # Run the unit tests.
      - name:               Run tests
        working-directory:  ${{ github.workspace }}/repo/build
        run: |
          ctest                             \
            --build-config "${BUILD_TYPE}"  \
            --test-action test              \
            --output-on-failure             \
            --parallel 4

  bare-metal:
    name:     Bare Metal
    runs-on:  ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # Install dependencies.
      - name: Install APT dependencies
        run:  sudo apt-get install -y ninja-build gcc-arm-none-eabi

      # Check out the code.
      - name: Clone ${{ github.repository }}
        uses: actions/checkout@v2
        with:
          path: repo

      # Create build directory.
      - name: Create build environment
        run:  cmake -E make_directory '${{ github.workspace }}/repo/build'

      # Run CMake configuration.
      - name:               Configure CMake
        working-directory:  ${{ github.workspace }}/repo/build
        run: |
          cmake ..                              \
            -G Ninja                            \
            -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"  \
            -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/gcc-arm-none-eabi.cmake

      # Build the library.
      - name:               Build library
        working-directory:  ${{ github.workspace }}/repo/build
        run:                cmake --build . --config "${BUILD_TYPE}"
